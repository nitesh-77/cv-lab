#1st a,b
import cv2
from google.colab.patches import cv2_imshow
img = cv2.imread("/content/dog.jpg",0)
cv2_imshow(img)
---------------------------------------------------
#2nd program (image rezie)
import cv2
from google.colab.patches import cv2_imshow
image = cv2.imread(r"/content/dog.jpg",)
image2 = cv2.imread(r"/content/guy.jpg")
bigger = cv2.resize(image , (500, 500))
bigger2 = cv2.resize(image2,(500,500) )
cv2_imshow(bigger)
cv2_imshow(bigger2)
-----------------------------------------------------
#3rd a (contour image)
import cv2
from google.colab.patches import cv2_imshow
gray_img = cv2.imread('/content/dog.jpg',cv2.IMREAD_GRAYSCALE)
_,binary_img = cv2.threshold(gray_img, 200, 255, cv2.THRESH_BINARY)
contours,_= cv2.findContours(binary_img,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
contour_img = cv2.cvtColor(gray_img , cv2.COLOR_GRAY2BGR)
cv2.drawContours(contour_img, contours, -1,(0,255,0),5)
cv2_imshow(contour_img)
---------------------------------------------------------
#3b blend image
blended_img = cv2.addWeighted(bigger,0.3,bigger2,0,6.0)
cv2_imshow(blended_img)
----------------------------------------------------------
#4th program (histogram equalization)
import cv2 as cv
from google.colab.patches import cv2_imshow
img = cv.imread("/content/dog.jpg")
yuv_img = cv.cvtColor(img,cv.COLOR_BGR2YUV)
yuv_img[:,:,0] = cv.equalizeHist(yuv_img[:,:,0])
equalized_img = cv.cvtColor(yuv_img,cv.COLOR_YUV2BGR)
cv2_imshow(equalized_img)
y,u,v = cv.split(yuv_img)
cv2_imshow(y)
cv2_imshow(u)
cv2_imshow(v)
-------------------------------------------------------------
#5th a (image blur)
from cv2.gapi import medianBlur
import cv2 as cv
from google.colab.patches import cv2_imshow
img = cv.imread(r"/content/dog.jpg",)
avging = cv.blur(img,(90,20))
cv2_imshow(avging)
gausBlur = cv.GaussianBlur(img,(5,5),0)
cv2_imshow(gausBlur)

medianBlur = cv.medianBlur(img,7)
cv2_imshow(medianBlur)
-------------------------------------------------------------
#5th b program (image sharpening)
import numpy as np
import cv2 as cv
from google.colab.patches import cv2_imshow
img = cv.imread("/content/dog.jpg")
sharpeningKernel = np.array(([0,-1,0],[-1,5,-1],[0,-1,0]),dtype = "int")
op = cv.filter2D(img, -1, sharpeningKernel)
cv2_imshow(img)
cv2_imshow(op)
----------------------------------------------------------------
#6th program(image quantize)
import cv2 as cv
from google.colab.patches import cv2_imshow
img = cv.imread("/content/dog.jpg")
pixels = img.reshape((-1, 3)).astype(np.float32)
criteria = (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, 10, 1.0)
num_clusters = 8
_, labels, centers = cv.kmeans(pixels, num_clusters, None, criteria, 10, cv.KMEANS_RANDOM_CENTERS)
centers = np.uint8(centers)
quantized_img = centers[labels.flatten()]
quantized_img = quantized_img.reshape(img.shape)
cv2_imshow(quantized_img)
---------------------------------------------------------------------
#7th program a (rotate and traslate)
import cv2
from google.colab.patches import cv2_imshow
image = cv2.imread('/content/guy.jpg')
height, width = image.shape[:2]
rotate_matrix = cv2.getRotationMatrix2D(center=(width / 2, height / 2), angle=45, scale=1)
rotated_image = cv2.warpAffine(image, rotate_matrix, (width, height))
cv2_imshow(rotated_image)
----------------------------------------------------------------------
import numpy as np
import cv2 as cv
from matplotlib import pyplot as plt
from google.colab.patches import cv2_imshow
img = cv.imread('/content/guy.jpg',0)
edges = cv.Canny(img,100,200)
plt.subplot(121), plt.imshow(img,cmap = 'gray')
plt.title('Original Image'), plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(edges,cmap = 'gray')
plt.title('Edge Image'), plt.xticks([]), plt.yticks([])
plt.show()
------------------------------------------------------------------
#9th dailation
# Python program to demonstrate erosion and
# dilation of images.
import cv2
import numpy as np
from google.colab.patches import cv2_imshow
# Reading the input image
img = cv2.imread('/content/guy.jpg', 0)
kernel = np.ones((5, 5), np.uint8)
img_erosion = cv2.erode(img, kernel, iterations=1)
img_dilation = cv2.dilate(img, kernel, iterations=1)
cv2_imshow( img)
cv2_imshow( img_erosion)
cv2_imshow( img_dilation)
--------------------------------------------------------------------
#10th program
import cv2
import numpy as np
from google.colab.patches import cv2_imshow
image = cv2.imread('/content/guy.jpg')
img = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
ret, th1 = cv2.threshold(img,160, 255, cv2.THRESH_BINARY)
th2 = cv2.adaptiveThreshold(img,255,cv2.ADAPTIVE_THRESH_MEAN_C,
            cv2.THRESH_BINARY,11,2)
th3 = cv2.adaptiveThreshold(img,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
            cv2.THRESH_BINARY,11,2)
cv2_imshow(image)
cv2_imshow(th1)
cv2_imshow( th2)
cv2_imshow( th3)
-------------------------------------------------------------------